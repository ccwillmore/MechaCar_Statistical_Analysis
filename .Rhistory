knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("../Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students['school_name'])
# Use length() to identify the number of schools
length(unique(students['school_name']))
# Use length() to identify the number of schools
length(unique(students[['school_name']]))
# Use length() to identify the number of schools
num_schools = length(unique(students$school_name))
# Use length() to identify the number of schools
num_schools <- length(unique(students$school_name))
print(num_schools)
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
# unique(dataset, variable) displays unique elements from that column
schools <- unique(students$school_name)
print(schools)
# unique(dataset, variable) displays unique elements from that column
schools <- unique(students$school_name)
paste(schools)
# nrow() returns the number of rows
num_students <- nrow(students)
paste("There are a total of", num_students, "students.")
mean_reading_score <- mean(students$reading_score)
paste("The average reading score is", mean_reading_score)
mean_math_score <- mean(students$math_score)
paste("The average math score is", mean_math_score)
mean_reading_score <- round(mean(students$reading_score),2)
paste("The average reading score is", mean_reading_score)
mean_math_score <- round(mean(students$math_score),2)
paste("The average math score is", mean_math_score)
passing_reading = length(students[students$reading_score>=70])/num_students
passing_reading = nrow(students[students$reading_score>=70])/num_students
passing_reading = nrow(students[students$reading_score>=70])
View(students)
num_pass = nrow(filter(students,reading_score>=70))
# paste(passing_reading, "% of the students have passing reading scores.")
num_pass <- nrow(filter(students,reading_score>=70))
print(num_pass)
# paste(passing_reading, "% of the students have passing reading scores.")
num_pass <- nrow(filter(students,reading_score>=70))
passing_reading <- num_pass / num_students
print(num_pass)
# paste(passing_reading, "% of the students have passing reading scores.")
num_pass <- nrow(filter(students,reading_score>=70))
passing_reading <- num_pass / num_students
print(num_pass)
paste(passing_reading, "% of the students have passing reading scores.")
num_pass <- nrow(filter(students,reading_score>=70))
passing_reading <- round(num_pass*100 / num_students,2)
print(num_pass)
paste(passing_reading, "% of the students have passing reading scores.")
num_pass <- nrow(filter(students,math_score>=70))
percentage_passing_math <- round(num_pass*100 / num_students,2)
print(num_pass)
paste(percentage_passing_math, "% of the students have passing math scores.")
num_pass <- nrow(filter(students,math_score>=70 & reading_score>=70))
percentage_passing_all <- round(num_pass*100 / num_students,2)
print(num_pass)
paste(percentage_passing_all, "% of the students have passing math and reading scores.")
reading_by_school = group_by(students$school_name) %>% mean(students$reading_score)
reading_by_school <- group_by(students$school_name) %>% mean(students$reading_score)
group_by(students,school_name)
group_by(students,school_name) %>% mean(students$reading_score)
grouped_by_sch <- group_by(students,school_name)
summarize(grouped_by_sch,mean(reading_score),mean(math_score))
grouped_by_sch <- group_by(students,school_name)
# summarize(grouped_by_sch,mean(reading_score),mean(math_score))
group_by(students,school_name) %>% summarize(grouped_by_sch,mean(reading_score),mean(math_score))
grouped_by_sch <- group_by(students,school_name)
# summarize(grouped_by_sch,mean(reading_score),mean(math_score))
group_by(students,school_name) %>% summarize(students,mean(reading_score),mean(math_score))
grouped_by_sch <- group_by(students,school_name)
# summarize(grouped_by_sch,mean(reading_score),mean(math_score))
summarize(group_by(students,school_name),mean(reading_score),mean(math_score))
grouped_by_sch <- group_by(students,school_name,grade)
summarize(grouped_by_sch,mean(reading_score),mean(math_score))
grouped_by_sch <- group_by(students,school_name,grade)
sort(summarize(grouped_by_sch,mean(reading_score),mean(math_score)),grade)
grouped_by_sch <- group_by(students,school_name,grade)
summarize(grouped_by_sch,mean(reading_score),mean(math_score))
# Import dependencies
library(tidyverse)
library(dplyr)
# Read CSV file into a dataframe
mechaCar_mpg_data <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechaCar_mpg_data)
# Deliverable 1
# Perform multiple linear regression using all columns
linear_model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, mechaCar_mpg_data)
summary(linear_model)
# Deliverable 2
# Read in suspension coil data
Suspension_coil_data <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(Suspension_coil_data)
# Create a summary dataframe for all of the data
total_summary <- Suspension_coil_data %>% summarize(mean_PSI = mean(PSI), median_PSI = median(PSI),
variance_PSI = var(PSI),
SD_PSI =sd(PSI) ,.groups = 'keep')
head(total_summary)
# Create summary dataframe by lot number
lot_summary <- Suspension_coil_data %>% group_by(Manufacturing_Lot) %>% summarise(mean_PSI = mean(PSI), median_PSI = median(PSI),
variance_PSI = var(PSI),
SD_PSI =sd(PSI) ,.groups = 'keep')
head(lot_summary)
# Deliverable 3
# Create a T test to determine if the total of all lots is statistically different from the population mean of 1500 psi
t.test(Suspension_coil_data$PSI,mu=1500)
# Create T tests for each lot compared to population mean of 1500 psi
# Define vector to use in for loop
lots <- unique(Suspension_coil_data$Manufacturing_Lot)
# Loop through the unique lots
for (element in lots) {
print (element)
print(t.test(subset(Suspension_coil_data, Manufacturing_Lot == element, select = PSI),mu=1500))
}
library(tidyverse)
library(dplyr)
mechaCar_mpg_data <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
mechaCar_mpg_data <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
setwd("C:/Users/User/git/MechaCar_Statistical_Analysis")
library(tidyverse)
library(dplyr)
mechaCar_mpg_data <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechaCar_mpg_data)
# Perform multiple linear regression using all columns
linear_model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, mechaCar_mpg_data)
summary(linear_model)
# Read in suspension coil data
Suspension_coil_data <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(Suspension_coil_data)
# Create a summary dataframe for all of the data
total_summary <- Suspension_coil_data %>% summarize(mean_PSI = mean(PSI), median_PSI = median(PSI),
variance_PSI = var(PSI),
SD_PSI =sd(PSI) ,.groups = 'keep')
head(total_summary)
# Create summary dataframe by lot number
lot_summary <- Suspension_coil_data %>% group_by(Manufacturing_Lot) %>% summarise(mean_PSI = mean(PSI), median_PSI = median(PSI),
variance_PSI = var(PSI),
SD_PSI =sd(PSI) ,.groups = 'keep')
head(lot_summary)
t.test(Suspension_coil_data$PSI,mu=1500)
# Define vector to use in for loop
lots <- unique(Suspension_coil_data$Manufacturing_Lot)
# Loop through the unique lots
for (element in lots) {
print (element)
print(t.test(subset(Suspension_coil_data, Manufacturing_Lot == element, select = PSI),mu=1500))
}
View(Suspension_coil_data)
